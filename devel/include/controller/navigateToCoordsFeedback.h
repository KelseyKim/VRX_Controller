// Generated by gencpp from file controller/navigateToCoordsFeedback.msg
// DO NOT EDIT!


#ifndef CONTROLLER_MESSAGE_NAVIGATETOCOORDSFEEDBACK_H
#define CONTROLLER_MESSAGE_NAVIGATETOCOORDSFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace controller
{
template <class ContainerAllocator>
struct navigateToCoordsFeedback_
{
  typedef navigateToCoordsFeedback_<ContainerAllocator> Type;

  navigateToCoordsFeedback_()
    : distanceToGoal()
    , currentCoords()
    , leftThrustCmd()
    , rightThrustCmd()  {
    }
  navigateToCoordsFeedback_(const ContainerAllocator& _alloc)
    : distanceToGoal(_alloc)
    , currentCoords(_alloc)
    , leftThrustCmd(_alloc)
    , rightThrustCmd(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _distanceToGoal_type;
  _distanceToGoal_type distanceToGoal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _currentCoords_type;
  _currentCoords_type currentCoords;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _leftThrustCmd_type;
  _leftThrustCmd_type leftThrustCmd;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _rightThrustCmd_type;
  _rightThrustCmd_type rightThrustCmd;





  typedef boost::shared_ptr< ::controller::navigateToCoordsFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller::navigateToCoordsFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct navigateToCoordsFeedback_

typedef ::controller::navigateToCoordsFeedback_<std::allocator<void> > navigateToCoordsFeedback;

typedef boost::shared_ptr< ::controller::navigateToCoordsFeedback > navigateToCoordsFeedbackPtr;
typedef boost::shared_ptr< ::controller::navigateToCoordsFeedback const> navigateToCoordsFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controller::navigateToCoordsFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controller::navigateToCoordsFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::controller::navigateToCoordsFeedback_<ContainerAllocator1> & lhs, const ::controller::navigateToCoordsFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.distanceToGoal == rhs.distanceToGoal &&
    lhs.currentCoords == rhs.currentCoords &&
    lhs.leftThrustCmd == rhs.leftThrustCmd &&
    lhs.rightThrustCmd == rhs.rightThrustCmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::controller::navigateToCoordsFeedback_<ContainerAllocator1> & lhs, const ::controller::navigateToCoordsFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::controller::navigateToCoordsFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller::navigateToCoordsFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller::navigateToCoordsFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller::navigateToCoordsFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::navigateToCoordsFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::navigateToCoordsFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controller::navigateToCoordsFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38e97591d720cad24ca08797ade7f216";
  }

  static const char* value(const ::controller::navigateToCoordsFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38e97591d720cad2ULL;
  static const uint64_t static_value2 = 0x4ca08797ade7f216ULL;
};

template<class ContainerAllocator>
struct DataType< ::controller::navigateToCoordsFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller/navigateToCoordsFeedback";
  }

  static const char* value(const ::controller::navigateToCoordsFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controller::navigateToCoordsFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Feedback\n"
"geometry_msgs/Point distanceToGoal\n"
"geometry_msgs/Point currentCoords\n"
"std_msgs/Float64 leftThrustCmd\n"
"std_msgs/Float64 rightThrustCmd\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::controller::navigateToCoordsFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controller::navigateToCoordsFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distanceToGoal);
      stream.next(m.currentCoords);
      stream.next(m.leftThrustCmd);
      stream.next(m.rightThrustCmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct navigateToCoordsFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controller::navigateToCoordsFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controller::navigateToCoordsFeedback_<ContainerAllocator>& v)
  {
    s << indent << "distanceToGoal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.distanceToGoal);
    s << indent << "currentCoords: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.currentCoords);
    s << indent << "leftThrustCmd: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.leftThrustCmd);
    s << indent << "rightThrustCmd: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.rightThrustCmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLLER_MESSAGE_NAVIGATETOCOORDSFEEDBACK_H
